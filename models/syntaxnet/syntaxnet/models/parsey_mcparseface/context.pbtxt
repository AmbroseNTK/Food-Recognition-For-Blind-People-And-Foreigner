Parameter {
  name: "brain_parser_embedding_dims"
  value: "32;32;64"
}
Parameter {
  name: "brain_parser_embedding_names"
  value: "labels;tags;words"
}
Parameter {
  name: 'brain_parser_scoring'
  value: 'default'
}
Parameter {
  name: "brain_parser_features"
  value:
  'stack.child(1).label '
  'stack.child(1).sibling(-1).label '
  'stack.child(-1).label '
  'stack.child(-1).sibling(1).label '
  'stack.child(2).label '
  'stack.child(-2).label '
  'stack(1).child(1).label '
  'stack(1).child(1).sibling(-1).label '
  'stack(1).child(-1).label '
  'stack(1).child(-1).sibling(1).label '
  'stack(1).child(2).label '
  'stack(1).child(-2).label; '
  'input.token.tag '
  'input(1).token.tag '
  'input(2).token.tag '
  'input(3).token.tag '
  'stack.token.tag '
  'stack.child(1).token.tag '
  'stack.child(1).sibling(-1).token.tag '
  'stack.child(-1).token.tag '
  'stack.child(-1).sibling(1).token.tag '
  'stack.child(2).token.tag '
  'stack.child(-2).token.tag '
  'stack(1).token.tag '
  'stack(1).child(1).token.tag '
  'stack(1).child(1).sibling(-1).token.tag '
  'stack(1).child(-1).token.tag '
  'stack(1).child(-1).sibling(1).token.tag '
  'stack(1).child(2).token.tag '
  'stack(1).child(-2).token.tag '
  'stack(2).token.tag '
  'stack(3).token.tag; '
  'input.token.word '
  'input(1).token.word '
  'input(2).token.word '
  'input(3).token.word '
  'stack.token.word '
  'stack.child(1).token.word '
  'stack.child(1).sibling(-1).token.word '
  'stack.child(-1).token.word '
  'stack.child(-1).sibling(1).token.word '
  'stack.child(2).token.word '
  'stack.child(-2).token.word '
  'stack(1).token.word '
  'stack(1).child(1).token.word '
  'stack(1).child(1).sibling(-1).token.word '
  'stack(1).child(-1).token.word '
  'stack(1).child(-1).sibling(1).token.word '
  'stack(1).child(2).token.word '
  'stack(1).child(-2).token.word '
  'stack(2).token.word '
  'stack(3).token.word '
}
Parameter {
  name: "brain_parser_transition_system"
  value: "arc-standard"
}

Parameter {
  name: "brain_tagger_embedding_dims"
  value: "8;16;16;16;16;64"
}
Parameter {
  name: "brain_tagger_embedding_names"
  value: "other;prefix2;prefix3;suffix2;suffix3;words"
}
Parameter {
  name: "brain_tagger_features"
  value:
  'input.digit '
  'input.hyphen; '
  'input.prefix(length="2") '
  'input(1).prefix(length="2") '
  'input(2).prefix(length="2") '
  'input(3).prefix(length="2") '
  'input(-1).prefix(length="2") '
  'input(-2).prefix(length="2") '
  'input(-3).prefix(length="2") '
  'input(-4).prefix(length="2"); '
  'input.prefix(length="3") '
  'input(1).prefix(length="3") '
  'input(2).prefix(length="3") '
  'input(3).prefix(length="3") '
  'input(-1).prefix(length="3") '
  'input(-2).prefix(length="3") '
  'input(-3).prefix(length="3") '
  'input(-4).prefix(length="3"); '
  'input.suffix(length="2") '
  'input(1).suffix(length="2") '
  'input(2).suffix(length="2") '
  'input(3).suffix(length="2") '
  'input(-1).suffix(length="2") '
  'input(-2).suffix(length="2") '
  'input(-3).suffix(length="2") '
  'input(-4).suffix(length="2"); '
  'input.suffix(length="3") '
  'input(1).suffix(length="3") '
  'input(2).suffix(length="3") '
  'input(3).suffix(length="3") '
  'input(-1).suffix(length="3") '
  'input(-2).suffix(length="3") '
  'input(-3).suffix(length="3") '
  'input(-4).suffix(length="3"); '
  'input.token.word '
  'input(1).token.word '
  'input(2).token.word '
  'input(3).token.word '
  'input(-1).token.word '
  'input(-2).token.word '
  'input(-3).token.word '
  'input(-4).token.word '
}
Parameter {
  name: "brain_tagger_transition_system"
  value: "tagger"
}

input {
  name: "tag-map"
  Part {
    file_pattern: "syntaxnet/models/parsey_mcparseface/tag-map"
  }
}
input {
  name: "tag-to-category"
  Part {
    file_pattern: "syntaxnet/models/parsey_mcparseface/fine-to-universal.map"
  }
}
input {
  name: "word-map"
  Part {
    file_pattern: "syntaxnet/models/parsey_mcparseface/word-map"
  }
}
input {
  name: "label-map"
  Part {
    file_pattern: "syntaxnet/models/parsey_mcparseface/label-map"
  }
}
input {
  name: "prefix-table"
  Part {
    file_pattern: "syntaxnet/models/parsey_mcparseface/prefix-table"
  }
}
input {
  name: "suffix-table"
  Part {
    file_pattern: "syntaxnet/models/parsey_mcparseface/suffix-table"
  }
}
input {
  name: 'stdin'
  record_format: 'english-text'
  Part {
    file_pattern: '-'
  }
}
input {
  name: 'stdin-conll'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '-'
  }
}
input {
  name: 'stdout-conll'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '-'
  }
}
